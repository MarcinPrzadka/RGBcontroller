
dziala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001f4  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000079  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000239  00000000  00000000  0000028d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016a  00000000  00000000  000004c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000023b  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  0000086c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e9  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  000009b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	2f c0       	rjmp	.+94     	; 0x66 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	39 d0       	rcall	.+114    	; 0xb6 <main>
  44:	9b c0       	rjmp	.+310    	; 0x17c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <USART_Init>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void USART_Init( uint16_t baud){
	UBRRH = (uint16_t)(baud>>8);
  48:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint16_t)baud;
  4a:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  4c:	88 e1       	ldi	r24, 0x18	; 24
  4e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  50:	86 e8       	ldi	r24, 0x86	; 134
  52:	80 bd       	out	0x20, r24	; 32
}
  54:	08 95       	ret

00000056 <USART_Transmit>:

void USART_Transmit( char buflen) {
	while( !(UCSRA & (1<<UDRE)) );
  56:	5d 9b       	sbis	0x0b, 5	; 11
  58:	fe cf       	rjmp	.-4      	; 0x56 <USART_Transmit>
	UDR = buflen;
  5a:	8c b9       	out	0x0c, r24	; 12
}
  5c:	08 95       	ret

0000005e <USART_Receive>:
	
unsigned char USART_Receive( void ){
   while( !(UCSRA & (1<<RXC)) );
  5e:	5f 9b       	sbis	0x0b, 7	; 11
  60:	fe cf       	rjmp	.-4      	; 0x5e <USART_Receive>
   return UDR;
  62:	8c b1       	in	r24, 0x0c	; 12
}
  64:	08 95       	ret

00000066 <__vector_3>:

volatile uint8_t pwmR, pwmG, pwmB;

ISR( TIMER2_COMP_vect ) // cia³o procedury obs³ugi przerwania Compare Match Timera2
{
  66:	1f 92       	push	r1
  68:	0f 92       	push	r0
  6a:	0f b6       	in	r0, 0x3f	; 63
  6c:	0f 92       	push	r0
  6e:	11 24       	eor	r1, r1
  70:	8f 93       	push	r24
  72:	9f 93       	push	r25
	static uint8_t cnt; // definicja naszego licznika PWM

	// bezpoœrednie sterowanie wyjœciami kana³ów PWM
	if(cnt>=pwmR) PORTC |= (1<<PC0); else PORTC &= ~(1<<PC0);
  74:	90 91 60 00 	lds	r25, 0x0060
  78:	80 91 62 00 	lds	r24, 0x0062
  7c:	98 17       	cp	r25, r24
  7e:	10 f0       	brcs	.+4      	; 0x84 <__vector_3+0x1e>
  80:	a8 9a       	sbi	0x15, 0	; 21
  82:	01 c0       	rjmp	.+2      	; 0x86 <__vector_3+0x20>
  84:	a8 98       	cbi	0x15, 0	; 21
	if(cnt>=pwmG) PORTC |= (1<<PC1); else PORTC &= ~(1<<PC1);
  86:	80 91 63 00 	lds	r24, 0x0063
  8a:	98 17       	cp	r25, r24
  8c:	10 f0       	brcs	.+4      	; 0x92 <__vector_3+0x2c>
  8e:	a9 9a       	sbi	0x15, 1	; 21
  90:	01 c0       	rjmp	.+2      	; 0x94 <__vector_3+0x2e>
  92:	a9 98       	cbi	0x15, 1	; 21
	if(cnt>=pwmB) PORTC |= (1<<PC2); else PORTC &= ~(1<<PC2);
  94:	80 91 61 00 	lds	r24, 0x0061
  98:	98 17       	cp	r25, r24
  9a:	10 f0       	brcs	.+4      	; 0xa0 <__vector_3+0x3a>
  9c:	aa 9a       	sbi	0x15, 2	; 21
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <__vector_3+0x3c>
  a0:	aa 98       	cbi	0x15, 2	; 21
	cnt++;	// zwiêkszanie licznika o 1
  a2:	9f 5f       	subi	r25, 0xFF	; 255
  a4:	90 93 60 00 	sts	0x0060, r25
}
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <main>:


int main(void){
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	df 93       	push	r29
  bc:	cf 93       	push	r28
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void USART_Init( uint16_t baud){
	UBRRH = (uint16_t)(baud>>8);
  c2:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint16_t)baud;
  c4:	83 e3       	ldi	r24, 0x33	; 51
  c6:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  c8:	88 e1       	ldi	r24, 0x18	; 24
  ca:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  cc:	86 e8       	ldi	r24, 0x86	; 134
  ce:	80 bd       	out	0x20, r24	; 32

	USART_Init(MYUBRR);
	unsigned char data;
	
	int z;
	unsigned char *data1[z];
  d0:	6d b7       	in	r22, 0x3d	; 61
  d2:	7e b7       	in	r23, 0x3e	; 62
  d4:	6f 5f       	subi	r22, 0xFF	; 255
  d6:	7f 4f       	sbci	r23, 0xFF	; 255
	unsigned char data2[z-1];
  d8:	0f 90       	pop	r0
  da:	ad b7       	in	r26, 0x3d	; 61
  dc:	be b7       	in	r27, 0x3e	; 62
  de:	11 96       	adiw	r26, 0x01	; 1
	
	
	//***** SPRZÊTOWY PWM - 1 KANA£ OC0 (PB2) *******
	DDRB |= (1<<PB2); // ustawienie koñcówki OC0 (PB2) sprzêtowy PWM jako WYJŒCIE
  e0:	ba 9a       	sbi	0x17, 2	; 23
	TCCR0 |= (1<<WGM10)|(1<<WGM12);		// tryb Fast PWM
  e2:	83 b7       	in	r24, 0x33	; 51
  e4:	89 60       	ori	r24, 0x09	; 9
  e6:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM21);				// clear at TOP
  e8:	83 b7       	in	r24, 0x33	; 51
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<CS00);					// preskaler = 1
  ee:	83 b7       	in	r24, 0x33	; 51
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	83 bf       	out	0x33, r24	; 51
	OCR1A=255;							// wygaszenie diody w kanale PWM
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	9b bd       	out	0x2b, r25	; 43
  fa:	8a bd       	out	0x2a, r24	; 42
	DDRC |= (1<<PC0)|(1<<PC1)|(1<<PC2); // ustawienie pinów kana³ów programowych PWM jako WYJŒCIA
  fc:	84 b3       	in	r24, 0x14	; 20
  fe:	87 60       	ori	r24, 0x07	; 7
 100:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC0)|(1<<PC1)|(1<<PC2); // wy³¹czenie diod LED pod³¹czonych katodami do wyjœæ
 102:	85 b3       	in	r24, 0x15	; 21
 104:	87 60       	ori	r24, 0x07	; 7
 106:	85 bb       	out	0x15, r24	; 21
	
	TCCR2 |= (1<<WGM21);	// tryb  CTC
 108:	85 b5       	in	r24, 0x25	; 37
 10a:	88 60       	ori	r24, 0x08	; 8
 10c:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<CS20);		// preskaler = 1
 10e:	85 b5       	in	r24, 0x25	; 37
 110:	81 60       	ori	r24, 0x01	; 1
 112:	85 bd       	out	0x25, r24	; 37
	OCR2 = 199;				// dodatkowy podzia³ czêsttotliwoœci przez 200
 114:	87 ec       	ldi	r24, 0xC7	; 199
 116:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);	// zezwolenie na przerwanie CompareMatch
 118:	89 b7       	in	r24, 0x39	; 57
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	89 bf       	out	0x39, r24	; 57
	sei();				// odblokowanie globalne przerwañ
 11e:	78 94       	sei
	uint8_t i;			// definicja zmiennej i na potrzeby pêtli for()

 	pwmR=0;
 120:	10 92 62 00 	sts	0x0062, r1
	pwmG=0;
 124:	10 92 63 00 	sts	0x0063, r1
	pwmB=0;
 128:	10 92 61 00 	sts	0x0061, r1
		if(data == '2' ) { if(pwmG != 255) pwmG=pwmG+5;}
		if(data == '5' ) { if(pwmG != 0) pwmG=pwmG-5; }
		if(data == '3' ) { if(pwmB != 255) pwmB=pwmB+5;}
		if(data == '6' ) { if(pwmB != 0) pwmB=pwmB-5; } */	
		
		if( *data1 == 'r' )  pwmR=data2;
 12c:	4a 2f       	mov	r20, r26
		if( *data1 == 'g' )  pwmG=data2;  
		if( *data1 == 'b' )  pwmB=data2;
		if( data == 'c' )  pwmR=100;
 12e:	54 e6       	ldi	r21, 0x64	; 100
	while( !(UCSRA & (1<<UDRE)) );
	UDR = buflen;
}
	
unsigned char USART_Receive( void ){
   while( !(UCSRA & (1<<RXC)) );
 130:	5f 9b       	sbis	0x0b, 7	; 11
 132:	fe cf       	rjmp	.-4      	; 0x130 <main+0x7a>
   return UDR;
 134:	9c b1       	in	r25, 0x0c	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN);
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
}

void USART_Transmit( char buflen) {
	while( !(UCSRA & (1<<UDRE)) );
 136:	5d 9b       	sbis	0x0b, 5	; 11
 138:	fe cf       	rjmp	.-4      	; 0x136 <main+0x80>
	UDR = buflen;
 13a:	9c b9       	out	0x0c, r25	; 12

	while(1){
		data = USART_Receive();
		USART_Transmit(data);
		z = sizeof(data);
		*data1 = data;
 13c:	29 2f       	mov	r18, r25
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	fb 01       	movw	r30, r22
 142:	31 83       	std	Z+1, r19	; 0x01
 144:	20 83       	st	Z, r18
		for(int i = 1; i<=z ; i++) {data2[i-1]=*data1[i];}
 146:	02 81       	ldd	r16, Z+2	; 0x02
 148:	13 81       	ldd	r17, Z+3	; 0x03
 14a:	f8 01       	movw	r30, r16
 14c:	80 81       	ld	r24, Z
 14e:	8c 93       	st	X, r24
		if(data == '2' ) { if(pwmG != 255) pwmG=pwmG+5;}
		if(data == '5' ) { if(pwmG != 0) pwmG=pwmG-5; }
		if(data == '3' ) { if(pwmB != 255) pwmB=pwmB+5;}
		if(data == '6' ) { if(pwmB != 0) pwmB=pwmB-5; } */	
		
		if( *data1 == 'r' )  pwmR=data2;
 150:	22 37       	cpi	r18, 0x72	; 114
 152:	31 05       	cpc	r19, r1
 154:	19 f4       	brne	.+6      	; 0x15c <main+0xa6>
 156:	40 93 62 00 	sts	0x0062, r20
 15a:	0b c0       	rjmp	.+22     	; 0x172 <main+0xbc>
		if( *data1 == 'g' )  pwmG=data2;  
 15c:	27 36       	cpi	r18, 0x67	; 103
 15e:	31 05       	cpc	r19, r1
 160:	19 f4       	brne	.+6      	; 0x168 <main+0xb2>
 162:	40 93 63 00 	sts	0x0063, r20
 166:	05 c0       	rjmp	.+10     	; 0x172 <main+0xbc>
		if( *data1 == 'b' )  pwmB=data2;
 168:	22 36       	cpi	r18, 0x62	; 98
 16a:	31 05       	cpc	r19, r1
 16c:	11 f4       	brne	.+4      	; 0x172 <main+0xbc>
 16e:	40 93 61 00 	sts	0x0061, r20
		if( data == 'c' )  pwmR=100;
 172:	93 36       	cpi	r25, 0x63	; 99
 174:	e9 f6       	brne	.-70     	; 0x130 <main+0x7a>
 176:	50 93 62 00 	sts	0x0062, r21
 17a:	da cf       	rjmp	.-76     	; 0x130 <main+0x7a>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
