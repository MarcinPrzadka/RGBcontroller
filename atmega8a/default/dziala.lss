
dziala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001c4  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000079  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000211  00000000  00000000  0000025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013a  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001eb  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f7  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000036  00000000  00000000  000008eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	48 c0       	rjmp	.+144    	; 0x98 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	52 d0       	rcall	.+164    	; 0xe8 <main>
  44:	83 c0       	rjmp	.+262    	; 0x14c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <USART_Init>:


extern volatile uint8_t pwmR, pwmG, pwmB;

void USART_Init( uint16_t baud){
	UBRRH = (uint16_t)(baud>>8);
  48:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint16_t)baud;
  4a:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  4c:	88 e1       	ldi	r24, 0x18	; 24
  4e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  50:	86 e8       	ldi	r24, 0x86	; 134
  52:	80 bd       	out	0x20, r24	; 32
}
  54:	08 95       	ret

00000056 <USART_Transmit>:

void USART_Transmit( char buflen) {
	while( !(UCSRA & (1<<UDRE)) );
  56:	5d 9b       	sbis	0x0b, 5	; 11
  58:	fe cf       	rjmp	.-4      	; 0x56 <USART_Transmit>
	UDR = buflen;
  5a:	8c b9       	out	0x0c, r24	; 12
}
  5c:	08 95       	ret

0000005e <USART_Receive>:
	
unsigned char USART_Receive( void ){
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  66:	2a 97       	sbiw	r28, 0x0a	; 10
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	f8 94       	cli
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	0f be       	out	0x3f, r0	; 63
  70:	cd bf       	out	0x3d, r28	; 61
    
	unsigned char m;
	char t[10];
	int p = 0;
//	do{
		while( !(UCSRA & (1<<RXC)) );
  72:	5f 9b       	sbis	0x0b, 7	; 11
  74:	fe cf       	rjmp	.-4      	; 0x72 <USART_Receive+0x14>
	//		p=p+1;
	//		t[p] = '\0';
	//	}
//	}while(UDR != '\r');
	
	if(strncmp(t, "r",1) == 0) pwmR = t[2] - '0'; 
  76:	89 81       	ldd	r24, Y+1	; 0x01
  78:	82 37       	cpi	r24, 0x72	; 114
  7a:	21 f4       	brne	.+8      	; 0x84 <USART_Receive+0x26>
  7c:	8b 81       	ldd	r24, Y+3	; 0x03
  7e:	80 53       	subi	r24, 0x30	; 48
  80:	80 93 62 00 	sts	0x0062, r24
//	if(strncmp(t, "g ",2) == 0) pwmG = t[2] - '0'; 
//	if(strncmp(t, "b ",2) == 0) pwmB = t[2] - '0'; 
//	if(t[0] == "r") pwmR = 200;
		
	return UDR; 
  84:	8c b1       	in	r24, 0x0c	; 12

	

}
  86:	2a 96       	adiw	r28, 0x0a	; 10
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
  92:	cf 91       	pop	r28
  94:	df 91       	pop	r29
  96:	08 95       	ret

00000098 <__vector_3>:

volatile uint8_t pwmR, pwmG, pwmB;

ISR( TIMER2_COMP_vect ) // cia³o procedury obs³ugi przerwania Compare Match Timera2
{
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
	static uint8_t cnt; // definicja naszego licznika PWM

	// bezpoœrednie sterowanie wyjœciami kana³ów PWM
	if(cnt>=pwmR) PORTC |= (1<<PC0); else PORTC &= ~(1<<PC0);
  a6:	90 91 60 00 	lds	r25, 0x0060
  aa:	80 91 62 00 	lds	r24, 0x0062
  ae:	98 17       	cp	r25, r24
  b0:	10 f0       	brcs	.+4      	; 0xb6 <__vector_3+0x1e>
  b2:	a8 9a       	sbi	0x15, 0	; 21
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <__vector_3+0x20>
  b6:	a8 98       	cbi	0x15, 0	; 21
	if(cnt>=pwmG) PORTC |= (1<<PC1); else PORTC &= ~(1<<PC1);
  b8:	80 91 63 00 	lds	r24, 0x0063
  bc:	98 17       	cp	r25, r24
  be:	10 f0       	brcs	.+4      	; 0xc4 <__vector_3+0x2c>
  c0:	a9 9a       	sbi	0x15, 1	; 21
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <__vector_3+0x2e>
  c4:	a9 98       	cbi	0x15, 1	; 21
	if(cnt>=pwmB) PORTC |= (1<<PC2); else PORTC &= ~(1<<PC2);
  c6:	80 91 61 00 	lds	r24, 0x0061
  ca:	98 17       	cp	r25, r24
  cc:	10 f0       	brcs	.+4      	; 0xd2 <__vector_3+0x3a>
  ce:	aa 9a       	sbi	0x15, 2	; 21
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <__vector_3+0x3c>
  d2:	aa 98       	cbi	0x15, 2	; 21
	cnt++;	// zwiêkszanie licznika o 1
  d4:	9f 5f       	subi	r25, 0xFF	; 255
  d6:	90 93 60 00 	sts	0x0060, r25
}
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <main>:


extern volatile uint8_t pwmR, pwmG, pwmB;

void USART_Init( uint16_t baud){
	UBRRH = (uint16_t)(baud>>8);
  e8:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint16_t)baud;
  ea:	83 e3       	ldi	r24, 0x33	; 51
  ec:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  ee:	88 e1       	ldi	r24, 0x18	; 24
  f0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  f2:	86 e8       	ldi	r24, 0x86	; 134
  f4:	80 bd       	out	0x20, r24	; 32
	USART_Init(MYUBRR);
	unsigned char data;
	unsigned size[10];
	
	//***** SPRZÊTOWY PWM - 1 KANA£ OC0 (PB2) *******
	DDRB |= (1<<PB2); // ustawienie koñcówki OC0 (PB2) sprzêtowy PWM jako WYJŒCIE
  f6:	ba 9a       	sbi	0x17, 2	; 23
	TCCR0 |= (1<<WGM10)|(1<<WGM12);		// tryb Fast PWM
  f8:	83 b7       	in	r24, 0x33	; 51
  fa:	89 60       	ori	r24, 0x09	; 9
  fc:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM21);				// clear at TOP
  fe:	83 b7       	in	r24, 0x33	; 51
 100:	80 62       	ori	r24, 0x20	; 32
 102:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<CS00);					// preskaler = 1
 104:	83 b7       	in	r24, 0x33	; 51
 106:	81 60       	ori	r24, 0x01	; 1
 108:	83 bf       	out	0x33, r24	; 51
	OCR1A=255;							// wygaszenie diody w kanale PWM
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	9b bd       	out	0x2b, r25	; 43
 110:	8a bd       	out	0x2a, r24	; 42
	DDRC |= (1<<PC0)|(1<<PC1)|(1<<PC2); // ustawienie pinów kana³ów programowych PWM jako WYJŒCIA
 112:	84 b3       	in	r24, 0x14	; 20
 114:	87 60       	ori	r24, 0x07	; 7
 116:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC0)|(1<<PC1)|(1<<PC2); // wy³¹czenie diod LED pod³¹czonych katodami do wyjœæ
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	87 60       	ori	r24, 0x07	; 7
 11c:	85 bb       	out	0x15, r24	; 21
	
	TCCR2 |= (1<<WGM21);	// tryb  CTC
 11e:	85 b5       	in	r24, 0x25	; 37
 120:	88 60       	ori	r24, 0x08	; 8
 122:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<CS20);		// preskaler = 1
 124:	85 b5       	in	r24, 0x25	; 37
 126:	81 60       	ori	r24, 0x01	; 1
 128:	85 bd       	out	0x25, r24	; 37
	OCR2 = 199;				// dodatkowy podzia³ czêsttotliwoœci przez 200
 12a:	87 ec       	ldi	r24, 0xC7	; 199
 12c:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);	// zezwolenie na przerwanie CompareMatch
 12e:	89 b7       	in	r24, 0x39	; 57
 130:	80 68       	ori	r24, 0x80	; 128
 132:	89 bf       	out	0x39, r24	; 57
	sei();				// odblokowanie globalne przerwañ
 134:	78 94       	sei
	
 	pwmR=0;
 136:	10 92 62 00 	sts	0x0062, r1
	pwmG=0;
 13a:	10 92 63 00 	sts	0x0063, r1
	pwmB=0;
 13e:	10 92 61 00 	sts	0x0061, r1
	

	while(1){
		data = USART_Receive();
 142:	8d df       	rcall	.-230    	; 0x5e <USART_Receive>
	UCSRB = (1<<RXEN)|(1<<TXEN);
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
}

void USART_Transmit( char buflen) {
	while( !(UCSRA & (1<<UDRE)) );
 144:	5d 9b       	sbis	0x0b, 5	; 11
 146:	fe cf       	rjmp	.-4      	; 0x144 <main+0x5c>
	UDR = buflen;
 148:	8c b9       	out	0x0c, r24	; 12
 14a:	fb cf       	rjmp	.-10     	; 0x142 <main+0x5a>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
