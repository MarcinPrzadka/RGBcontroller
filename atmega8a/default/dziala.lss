
dziala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080006c  0080006c  00000290  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000085  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001f3  00000000  00000000  00000335  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000148  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023c  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000dd  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  000009e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	36 c0       	rjmp	.+108    	; 0x74 <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ef       	ldi	r30, 0xF0	; 240
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 38       	cpi	r26, 0x86	; 134
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	89 d0       	rcall	.+274    	; 0x16c <main>
  5a:	c8 c0       	rjmp	.+400    	; 0x1ec <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <USART_Init>:
char t[20];
int p = 0;
extern volatile uint8_t pwmR, pwmG, pwmB;

void USART_Init( uint16_t baud){
	UBRRH = (uint16_t)(baud>>8);
  5e:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint16_t)baud;
  60:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  62:	88 e1       	ldi	r24, 0x18	; 24
  64:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  66:	86 e8       	ldi	r24, 0x86	; 134
  68:	80 bd       	out	0x20, r24	; 32
}
  6a:	08 95       	ret

0000006c <USART_Transmit>:

void USART_Transmit( char buflen) {
	while( !(UCSRA & (1<<UDRE)) );
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <USART_Transmit>
	UDR = buflen;
  70:	8c b9       	out	0x0c, r24	; 12
}
  72:	08 95       	ret

00000074 <__vector_3>:
}

volatile uint8_t pwmR, pwmG, pwmB;

ISR( TIMER2_COMP_vect ) // cia³o procedury obs³ugi przerwania Compare Match Timera2
{
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
	static uint8_t cnt; // definicja naszego licznika PWM

	// bezpoœrednie sterowanie wyjœciami kana³ów PWM
	if(cnt>=pwmR) PORTC |= (1<<PC0); else PORTC &= ~(1<<PC0);
  82:	90 91 6e 00 	lds	r25, 0x006E
  86:	80 91 84 00 	lds	r24, 0x0084
  8a:	98 17       	cp	r25, r24
  8c:	10 f0       	brcs	.+4      	; 0x92 <__vector_3+0x1e>
  8e:	a8 9a       	sbi	0x15, 0	; 21
  90:	01 c0       	rjmp	.+2      	; 0x94 <__vector_3+0x20>
  92:	a8 98       	cbi	0x15, 0	; 21
	if(cnt>=pwmG) PORTC |= (1<<PC1); else PORTC &= ~(1<<PC1);
  94:	80 91 85 00 	lds	r24, 0x0085
  98:	98 17       	cp	r25, r24
  9a:	10 f0       	brcs	.+4      	; 0xa0 <__vector_3+0x2c>
  9c:	a9 9a       	sbi	0x15, 1	; 21
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <__vector_3+0x2e>
  a0:	a9 98       	cbi	0x15, 1	; 21
	if(cnt>=pwmB) PORTC |= (1<<PC2); else PORTC &= ~(1<<PC2);
  a2:	80 91 83 00 	lds	r24, 0x0083
  a6:	98 17       	cp	r25, r24
  a8:	10 f0       	brcs	.+4      	; 0xae <__vector_3+0x3a>
  aa:	aa 9a       	sbi	0x15, 2	; 21
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <__vector_3+0x3c>
  ae:	aa 98       	cbi	0x15, 2	; 21
	cnt++;	// zwiêkszanie licznika o 1
  b0:	9f 5f       	subi	r25, 0xFF	; 255
  b2:	90 93 6e 00 	sts	0x006E, r25
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <USART_Receive>:
	while( !(UCSRA & (1<<UDRE)) );
	UDR = buflen;
}
	
unsigned char USART_Receive( void ){
    while( !(UCSRA & (1<<RXC)) );
  c4:	5f 9b       	sbis	0x0b, 7	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <USART_Receive>
    if(UDR >= ' '){
  c8:	8c b1       	in	r24, 0x0c	; 12
  ca:	80 32       	cpi	r24, 0x20	; 32
  cc:	88 f0       	brcs	.+34     	; 0xf0 <USART_Receive+0x2c>
   		t[p] = UDR;
  ce:	e0 91 6c 00 	lds	r30, 0x006C
  d2:	f0 91 6d 00 	lds	r31, 0x006D
  d6:	8c b1       	in	r24, 0x0c	; 12
  d8:	df 01       	movw	r26, r30
  da:	a1 59       	subi	r26, 0x91	; 145
  dc:	bf 4f       	sbci	r27, 0xFF	; 255
  de:	8c 93       	st	X, r24
		p=p+1;
  e0:	31 96       	adiw	r30, 0x01	; 1
  e2:	f0 93 6d 00 	sts	0x006D, r31
  e6:	e0 93 6c 00 	sts	0x006C, r30
		t[p] = '\0';
  ea:	e1 59       	subi	r30, 0x91	; 145
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	10 82       	st	Z, r1
		}
	if(UDR == '\r'){
  f0:	8c b1       	in	r24, 0x0c	; 12
  f2:	8d 30       	cpi	r24, 0x0D	; 13
  f4:	99 f5       	brne	.+102    	; 0x15c <USART_Receive+0x98>
		if(strncmp(t, "r ",2) == 0) pwmR = t[2] - '0'; 
  f6:	8f e6       	ldi	r24, 0x6F	; 111
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	60 e6       	ldi	r22, 0x60	; 96
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	42 e0       	ldi	r20, 0x02	; 2
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	66 d0       	rcall	.+204    	; 0x1d0 <strncmp>
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	29 f4       	brne	.+10     	; 0x112 <USART_Receive+0x4e>
 108:	80 91 71 00 	lds	r24, 0x0071
 10c:	80 53       	subi	r24, 0x30	; 48
 10e:	80 93 84 00 	sts	0x0084, r24
		if(strncmp(t, "g ",2) == 0) pwmG = t[2] - '0'; 
 112:	8f e6       	ldi	r24, 0x6F	; 111
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	63 e6       	ldi	r22, 0x63	; 99
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	42 e0       	ldi	r20, 0x02	; 2
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	58 d0       	rcall	.+176    	; 0x1d0 <strncmp>
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	29 f4       	brne	.+10     	; 0x12e <USART_Receive+0x6a>
 124:	80 91 71 00 	lds	r24, 0x0071
 128:	80 53       	subi	r24, 0x30	; 48
 12a:	80 93 85 00 	sts	0x0085, r24
		if(strncmp(t, "b ",2) == 0) pwmB = t[2] - '0'; 
 12e:	8f e6       	ldi	r24, 0x6F	; 111
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	66 e6       	ldi	r22, 0x66	; 102
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	42 e0       	ldi	r20, 0x02	; 2
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	4a d0       	rcall	.+148    	; 0x1d0 <strncmp>
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	29 f4       	brne	.+10     	; 0x14a <USART_Receive+0x86>
 140:	80 91 71 00 	lds	r24, 0x0071
 144:	80 53       	subi	r24, 0x30	; 48
 146:	80 93 83 00 	sts	0x0083, r24
		if(t[0] == "r") pwmR = 200;
 14a:	80 91 6f 00 	lds	r24, 0x006F
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	89 56       	subi	r24, 0x69	; 105
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	19 f4       	brne	.+6      	; 0x15c <USART_Receive+0x98>
 156:	88 ec       	ldi	r24, 0xC8	; 200
 158:	80 93 84 00 	sts	0x0084, r24
		}
	p = 0;
 15c:	10 92 6d 00 	sts	0x006D, r1
 160:	10 92 6c 00 	sts	0x006C, r1
	t[p] = '\0';
 164:	10 92 6f 00 	sts	0x006F, r1
	return UDR;
 168:	8c b1       	in	r24, 0x0c	; 12
}
 16a:	08 95       	ret

0000016c <main>:
char t[20];
int p = 0;
extern volatile uint8_t pwmR, pwmG, pwmB;

void USART_Init( uint16_t baud){
	UBRRH = (uint16_t)(baud>>8);
 16c:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint16_t)baud;
 16e:	83 e3       	ldi	r24, 0x33	; 51
 170:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
 172:	88 e1       	ldi	r24, 0x18	; 24
 174:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
 176:	86 e8       	ldi	r24, 0x86	; 134
 178:	80 bd       	out	0x20, r24	; 32

	USART_Init(MYUBRR);
	unsigned char data;
	
	//***** SPRZÊTOWY PWM - 1 KANA£ OC0 (PB2) *******
	DDRB |= (1<<PB2); // ustawienie koñcówki OC0 (PB2) sprzêtowy PWM jako WYJŒCIE
 17a:	ba 9a       	sbi	0x17, 2	; 23
	TCCR0 |= (1<<WGM10)|(1<<WGM12);		// tryb Fast PWM
 17c:	83 b7       	in	r24, 0x33	; 51
 17e:	89 60       	ori	r24, 0x09	; 9
 180:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM21);				// clear at TOP
 182:	83 b7       	in	r24, 0x33	; 51
 184:	80 62       	ori	r24, 0x20	; 32
 186:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<CS00);					// preskaler = 1
 188:	83 b7       	in	r24, 0x33	; 51
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	83 bf       	out	0x33, r24	; 51
	OCR1A=255;							// wygaszenie diody w kanale PWM
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9b bd       	out	0x2b, r25	; 43
 194:	8a bd       	out	0x2a, r24	; 42
	DDRC |= (1<<PC0)|(1<<PC1)|(1<<PC2); // ustawienie pinów kana³ów programowych PWM jako WYJŒCIA
 196:	84 b3       	in	r24, 0x14	; 20
 198:	87 60       	ori	r24, 0x07	; 7
 19a:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC0)|(1<<PC1)|(1<<PC2); // wy³¹czenie diod LED pod³¹czonych katodami do wyjœæ
 19c:	85 b3       	in	r24, 0x15	; 21
 19e:	87 60       	ori	r24, 0x07	; 7
 1a0:	85 bb       	out	0x15, r24	; 21
	
	TCCR2 |= (1<<WGM21);	// tryb  CTC
 1a2:	85 b5       	in	r24, 0x25	; 37
 1a4:	88 60       	ori	r24, 0x08	; 8
 1a6:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<CS20);		// preskaler = 1
 1a8:	85 b5       	in	r24, 0x25	; 37
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	85 bd       	out	0x25, r24	; 37
	OCR2 = 199;				// dodatkowy podzia³ czêsttotliwoœci przez 200
 1ae:	87 ec       	ldi	r24, 0xC7	; 199
 1b0:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);	// zezwolenie na przerwanie CompareMatch
 1b2:	89 b7       	in	r24, 0x39	; 57
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	89 bf       	out	0x39, r24	; 57
	sei();				// odblokowanie globalne przerwañ
 1b8:	78 94       	sei
	
 	pwmR=0;
 1ba:	10 92 84 00 	sts	0x0084, r1
	pwmG=0;
 1be:	10 92 85 00 	sts	0x0085, r1
	pwmB=0;
 1c2:	10 92 83 00 	sts	0x0083, r1
	

	while(1){
		data = USART_Receive();
 1c6:	7e df       	rcall	.-260    	; 0xc4 <USART_Receive>
	UCSRB = (1<<RXEN)|(1<<TXEN);
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
}

void USART_Transmit( char buflen) {
	while( !(UCSRA & (1<<UDRE)) );
 1c8:	5d 9b       	sbis	0x0b, 5	; 11
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <main+0x5c>
	UDR = buflen;
 1cc:	8c b9       	out	0x0c, r24	; 12
 1ce:	fb cf       	rjmp	.-10     	; 0x1c6 <main+0x5a>

000001d0 <strncmp>:
 1d0:	fb 01       	movw	r30, r22
 1d2:	dc 01       	movw	r26, r24
 1d4:	41 50       	subi	r20, 0x01	; 1
 1d6:	50 40       	sbci	r21, 0x00	; 0
 1d8:	30 f0       	brcs	.+12     	; 0x1e6 <strncmp+0x16>
 1da:	8d 91       	ld	r24, X+
 1dc:	01 90       	ld	r0, Z+
 1de:	80 19       	sub	r24, r0
 1e0:	19 f4       	brne	.+6      	; 0x1e8 <strncmp+0x18>
 1e2:	00 20       	and	r0, r0
 1e4:	b9 f7       	brne	.-18     	; 0x1d4 <strncmp+0x4>
 1e6:	88 1b       	sub	r24, r24
 1e8:	99 0b       	sbc	r25, r25
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
