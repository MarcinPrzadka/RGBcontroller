
dziala.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004f  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000015f  00000000  00000000  000001a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f4  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a2  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b7  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  000006a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:

#include <avr/io.h>
#include <util/delay.h>

void USART_Init( uint16_t baud){
	UBRRH = (uint16_t)(baud>>8);
  6c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint16_t)baud;
  6e:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
}
  78:	08 95       	ret

0000007a <USART_Transmit>:

void USART_Transmit( char buflen) {
	while( !(UCSRA & (1<<UDRE)) );
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <USART_Transmit>
	UDR = buflen;
  7e:	8c b9       	out	0x0c, r24	; 12
}
  80:	08 95       	ret

00000082 <USART_Receive>:
	
unsigned char USART_Receive( void ){
   while( !(UCSRA & (1<<RXC)) );
  82:	5f 9b       	sbis	0x0b, 7	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <USART_Receive>
   return UDR;
  86:	8c b1       	in	r24, 0x0c	; 12
}
  88:	08 95       	ret

0000008a <main>:

#include <avr/io.h>
#include <util/delay.h>

void USART_Init( uint16_t baud){
	UBRRH = (uint16_t)(baud>>8);
  8a:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint16_t)baud;
  8c:	83 e3       	ldi	r24, 0x33	; 51
  8e:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  94:	86 e8       	ldi	r24, 0x86	; 134
  96:	80 bd       	out	0x20, r24	; 32

int main(void){
	USART_Init(MYUBRR);
	unsigned char data;

	DDRC |= LED_PIN_R;
  98:	a0 9a       	sbi	0x14, 0	; 20
	DDRC |= LED_PIN_G;
  9a:	a1 9a       	sbi	0x14, 1	; 20
	DDRC |= LED_PIN_B;
  9c:	a2 9a       	sbi	0x14, 2	; 20
	LED_OFF_R;
  9e:	a8 9a       	sbi	0x15, 0	; 21
	LED_OFF_G;
  a0:	a9 9a       	sbi	0x15, 1	; 21
	LED_OFF_B;
  a2:	aa 9a       	sbi	0x15, 2	; 21
	while( !(UCSRA & (1<<UDRE)) );
	UDR = buflen;
}
	
unsigned char USART_Receive( void ){
   while( !(UCSRA & (1<<RXC)) );
  a4:	5f 9b       	sbis	0x0b, 7	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x1a>
   return UDR;
  a8:	8c b1       	in	r24, 0x0c	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN);
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
}

void USART_Transmit( char buflen) {
	while( !(UCSRA & (1<<UDRE)) );
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <main+0x20>
	UDR = buflen;
  ae:	8c b9       	out	0x0c, r24	; 12
	LED_OFF_B;

	while(1){
		data = USART_Receive();
		USART_Transmit(data);
		if(data == '1' ) LED_ON_R;
  b0:	81 33       	cpi	r24, 0x31	; 49
  b2:	11 f4       	brne	.+4      	; 0xb8 <main+0x2e>
  b4:	a8 98       	cbi	0x15, 0	; 21
  b6:	f6 cf       	rjmp	.-20     	; 0xa4 <main+0x1a>
		if(data == '4' ) LED_OFF_R;
  b8:	84 33       	cpi	r24, 0x34	; 52
  ba:	11 f4       	brne	.+4      	; 0xc0 <main+0x36>
  bc:	a8 9a       	sbi	0x15, 0	; 21
  be:	f2 cf       	rjmp	.-28     	; 0xa4 <main+0x1a>
		if(data == '2' ) LED_ON_G;
  c0:	82 33       	cpi	r24, 0x32	; 50
  c2:	11 f4       	brne	.+4      	; 0xc8 <main+0x3e>
  c4:	a9 98       	cbi	0x15, 1	; 21
  c6:	ee cf       	rjmp	.-36     	; 0xa4 <main+0x1a>
		if(data == '5' ) LED_OFF_G;
  c8:	85 33       	cpi	r24, 0x35	; 53
  ca:	11 f4       	brne	.+4      	; 0xd0 <main+0x46>
  cc:	a9 9a       	sbi	0x15, 1	; 21
  ce:	ea cf       	rjmp	.-44     	; 0xa4 <main+0x1a>
		if(data == '3' ) LED_ON_B;
  d0:	83 33       	cpi	r24, 0x33	; 51
  d2:	11 f4       	brne	.+4      	; 0xd8 <main+0x4e>
  d4:	aa 98       	cbi	0x15, 2	; 21
  d6:	e6 cf       	rjmp	.-52     	; 0xa4 <main+0x1a>
		if(data == '6' ) LED_OFF_B;
  d8:	86 33       	cpi	r24, 0x36	; 54
  da:	19 f3       	breq	.-58     	; 0xa2 <main+0x18>
  dc:	e3 cf       	rjmp	.-58     	; 0xa4 <main+0x1a>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
